git --version                                                      ## To check the current version of git

git config --global user.name "ALSPraveen"                         ## To add your github account user name

 git config --global user.email "saipraveenakurathi@gmail.com"     ## To add your github account email

 git config --global --list                                        ## To list the config settings

 git config --global init.defaultBranch main                       ## Update git settings to use main as default branch

git init                                                           ## Initialize git repository

 git init -b main Gitbash-demo                                     ## Specifying and creating a git local repository with default branch main

 git init Gitbash-demo                                             ## Creates & Initializes a git repository

git status                                                         ## Git checks if there are any updates made in the repo

git add Commands.txt                                               ## Adds the file to the staging area

 git add .                                                         ## Adds all the files to the staging area

git commit -m "First commit"                                       ## Commits all the files in the local repository

 git commit -am "Adds & Commits"                                   ## Adds and Commits the files with the same command

git push origin main                                               ## pushes to the remote repository

 git push                                                          ## Shorter version of push Command

 git push -u origin main                                           ## sets up stream  and stores location of the branch so that next time when we use "git push" it automatically refers to up stream location

git remote -v                                                      ## To list the origin set in remote

 git remote add origin https://github.com/ALSPraveen/Gitbash-Demo.git  ## To set the origin when no origin is set

 git remote set-url origin https://github.com/ALSPraveen/Gitbash-Demo.git  ## If the origin is already set and you want to change it.

 git fetch origin                                                          ## It fetches the differences between repos in local and remote

git pull origin main                                               ## git fetch + git merge

git ls-files                                                       ## Shows all the files git is tracking



Git can unstage all the staged files . Use the following command to back out all the changes from staging area

git restore --staged Commands.txt


You can discard the changes from the unstaged file to working directory 

git checkout -- Commands.txt 



git mv file1.txt file1-renamed.txt                                 ## With git mv command , git understands that file is renamed & changes were done at remote level and we only need to commit the changes.

 mv file1.txt file1-renamed.txt                                    ## At operating system level , we need to git understands it as the file is deleted and new file has been created,So we need to add changes to                                                                       staging area and then commit it.

 git add -A                                                        ## -A parameter lets git know of renamed , deleted or moved files and add them to staging area.



git log 

 git log --abbrev-commit                                           ## Shortens commit id

 git log --online --graph --decorate                               ## Lists commits in on line , decorates and adds labels 

 git log 78956...gv99977                                           ## Lists commits between those commit ids

 git log --since="3 days ago"                                      ## Lists commits that happened in the last three days

 git log -- file.txt                                               ## Lists commits done to that specific file

 git log --follow file.txt                                         ## Lists commits done for renames




git show 7899ECD                                                   ## Gives more specific details of commits, what ha been committed and all

git clean -n                                                       ## Shows which untracked files would be removed

 git clean -f                                                      ## Removes untracked files

 git clean -fd                                                     ## Removes untracked files & directories

 git clean -iX                                                     ## Removes untracked files & ignored files interactively



.gitignore                                                         ## Mention files and directories you want to ignore in that .gitignore

 ignoring-file.txt                                                 -- File
 ignoring-directory/                                               -- Directory


Git tracking flow,

Working directory ->   Staging area   -> .git local repositori   ->  remote repository
(modified changes)   (Added to staging)   (committed changes)        (pushed to github)


git diff                                                           ## It gives the difference between files in working and staging area

 git difftool                                                      ## same as diff but a visual difftool will be opened

git diff HEAD                                                      ## It gives the difference between files in working directory and last commmited files
 
 git difftool HEAD                                                 ## same as diff but a visual difftool will be opened


git diff --staged HEAD                                             ## It gives the difference between files in staged area and last commmited files
 
 git difftool --staged HEAD                                        ## same as diff but a visual difftool will be opened  


git diff  f9245 654f43                                             ## It gives the difference between mentioned commit ids
 
 git difftool --staged HEAD                                        ## same as diff but a visual difftool will be opened 

 
git diff  f9245 HEAD                                               ## It gives the difference between mentioned commit id and HEAD

                                                                      Here HEAD refers to last commit id

git diff HEAD HEAD^                                                ## It gives difference between HEAD commit and HEAD commit -1


git diff main origin/main                                          ## It gives difference between local repo and remote repo


Branches :

git branch -a                                                      ## Lists the branches associated with the git repo

 git branch newbranch                                              ## Create a new branch

 git checkout newbranch                                            ## Switches to the new branch

 git branch -m newbranch branch                                    ## Renaming a branch

 git branch -d newbranch                                           ## deleteing a branch

 git checkout -b praveen                                           ## Creates and switches to the new branch



 Merging feature branch into main branch:

git merge feature                                                 ## First commit the changes in feature branch , then checkout to main and perform merge .It will merge the changes done in feature branch to mai                                                                     n branch

git diff feature main                                             ## Can see the difference between feature and  main branches.

git merge feature --no-ff                                         ## No fast forward option, preserves commits


Resolving conflicts,

Whenever there is a modification made in excat file in two or more different branches , a conflict arises.

git mergetool                                                     ## it will open a mergetool and asks for possible combination of merges , choose that and exit .
                                                                     Commit the changes after resolving the conflit


git rebase main                                                   ## if you want the changes done in main branch to reflect in feature branch , you have to rebase it.
                                                                     Run this command in feature branch

 git rebase --abort                                               ## When there is rebase conflict , you can use this command to come out of rebase

 git rebase --continue                                            ## After you resolve rebase conflict using "git mergetool" , then add the file to staging area , commit it and run continue command to completre                                                                     rebase



How can others clone your private repository ?

1.Create a private repository
2.Settings of private reo -> Collaborators -> Add people -> type username of the individual who needs access
3.Your friend should use below command to clone it

  https://<friend_username>:<Personal_Access_Token>@github.com/ALSPraveen/Private-repo.git
  Note : your freind should have a PAT set up in his account already to authenticate the identify.


Steps to set up PAT :
1.Go to Settings -> Developer settings
2.Go to classical tokens
3.Give the permissions required
4. Submit , you will see a token created , copy it (you can only see it once)

